name: CI/CD Pipeline

on:
  push:
    branches: [main]   # The pipeline triggers only when code is pushed to the main branch

env:
  AWS_REGION: "eu-north-1"
  ECR_REGISTRY: "989005111810.dkr.ecr.eu-north-1.amazonaws.com"
  ECR_REPOSITORY: "counter-service-repo"
  IMAGE_NAME: "counter-service"
  IMAGE_TAG: "latest"
  KUBE_CONFIG_PATH: "$HOME/.kube/config"
  CLUSTER_NAME: "counter-eks-cluster"

jobs:
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3   # Checkout the code from the repository

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
        # Provides GitHub Actions with temporary AWS credentials from GitHub secrets

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
        # Authenticates Docker to push images to ECR

      - name: Build Docker image
        run: |
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
        # Builds the Docker image for the application

      - name: Push Docker image
        run: |
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        # Pushes the built image to ECR

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: build-and-push   # This job runs only after the image has been built and pushed
    steps:
      - uses: actions/checkout@v3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
        # Installs kubectl to interact with the EKS cluster

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
        # Ensures AWS CLI and kubectl can authenticate against EKS

      - name: Update kubeconfig from EKS
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME
        # Fetches kubeconfig from the EKS cluster so kubectl can connect

      - name: Deploy to EKS
        run: |
          kubectl get namespace prod || kubectl create namespace prod
          kubectl apply -f k8s-files/ -n prod
        # Ensures the "prod" namespace exists and applies all Kubernetes manifests (Deployment, Service, Ingress)

      - name: Wait for Ingress to be ready
        run: |
          echo "Waiting 2 minutes for Ingress to stabilize..."
          sleep 120
        # Waits to ensure the ALB ingress is fully provisioned before testing

      - name: Get Ingress Address
        id: ingress
        run: |
          INGRESS_ADDRESS=$(kubectl get ingress counter-app-ingress -n prod -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "Ingress address: http://$INGRESS_ADDRESS/count"
          echo "INGRESS_ADDRESS=$INGRESS_ADDRESS" >> $GITHUB_ENV
        # Retrieves the ALB DNS name and makes it available as an environment variable

      - name: Test GET request to /count
        run: |
          echo "Testing GET request to /count"
          curl -X GET http://$INGRESS_ADDRESS/count
        # Validates the GET counter endpoint after deployment

      - name: Test POST request to /count
        run: |
          echo "Testing POST request to /count"
          curl -X POST http://$INGRESS_ADDRESS/count
        # Validates the POST counter endpoint after deployment
